// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2023 22:49:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sdsy
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sdsy_vlg_sample_tst(
	A,
	AP,
	B,
	BP,
	Ci,
	N1,
	N2,
	N3,
	N4,
	Tlas,
	sampler_tx
);
input  A;
input  AP;
input  B;
input  BP;
input  Ci;
input  N1;
input  N2;
input  N3;
input  N4;
input  Tlas;
output sampler_tx;

reg sample;
time current_time;
always @(A or AP or B or BP or Ci or N1 or N2 or N3 or N4 or Tlas)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sdsy_vlg_check_tst (
	C0,
	S,
	SP,
	T,
	sampler_rx
);
input  C0;
input  S;
input  SP;
input  T;
input sampler_rx;

reg  C0_expected;
reg  S_expected;
reg  SP_expected;
reg  T_expected;

reg  C0_prev;
reg  S_prev;
reg  SP_prev;
reg  T_prev;

reg  C0_expected_prev;
reg  S_expected_prev;
reg  SP_expected_prev;
reg  T_expected_prev;

reg  last_C0_exp;
reg  last_S_exp;
reg  last_SP_exp;
reg  last_T_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	C0_prev = C0;
	S_prev = S;
	SP_prev = SP;
	T_prev = T;
end

// update expected /o prevs

always @(trigger)
begin
	C0_expected_prev = C0_expected;
	S_expected_prev = S_expected;
	SP_expected_prev = SP_expected;
	T_expected_prev = T_expected;
end



// expected SP
initial
begin
	SP_expected = 1'bX;
end 

// expected C0
initial
begin
	C0_expected = 1'bX;
end 

// expected S
initial
begin
	S_expected = 1'bX;
end 

// expected T
initial
begin
	T_expected = 1'bX;
end 
// generate trigger
always @(C0_expected or C0 or S_expected or S or SP_expected or SP or T_expected or T)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C0 = %b | expected S = %b | expected SP = %b | expected T = %b | ",C0_expected_prev,S_expected_prev,SP_expected_prev,T_expected_prev);
	$display("| real C0 = %b | real S = %b | real SP = %b | real T = %b | ",C0_prev,S_prev,SP_prev,T_prev);
`endif
	if (
		( C0_expected_prev !== 1'bx ) && ( C0_prev !== C0_expected_prev )
		&& ((C0_expected_prev !== last_C0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C0_exp = C0_expected_prev;
	end
	if (
		( S_expected_prev !== 1'bx ) && ( S_prev !== S_expected_prev )
		&& ((S_expected_prev !== last_S_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp = S_expected_prev;
	end
	if (
		( SP_expected_prev !== 1'bx ) && ( SP_prev !== SP_expected_prev )
		&& ((SP_expected_prev !== last_SP_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_expected_prev);
		$display ("     Real value = %b", SP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SP_exp = SP_expected_prev;
	end
	if (
		( T_expected_prev !== 1'bx ) && ( T_prev !== T_expected_prev )
		&& ((T_expected_prev !== last_T_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_T_exp = T_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sdsy_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg AP;
reg B;
reg BP;
reg Ci;
reg N1;
reg N2;
reg N3;
reg N4;
reg Tlas;
// wires                                               
wire C0;
wire S;
wire SP;
wire T;

wire sampler;                             

// assign statements (if any)                          
sdsy i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AP(AP),
	.B(B),
	.BP(BP),
	.C0(C0),
	.Ci(Ci),
	.N1(N1),
	.N2(N2),
	.N3(N3),
	.N4(N4),
	.S(S),
	.SP(SP),
	.T(T),
	.Tlas(Tlas)
);

// N4
initial
begin
	N4 = 1'b0;
end 

// N3
initial
begin
	N3 = 1'b1;
end 

// N2
initial
begin
	N2 = 1'b0;
end 

// N1
initial
begin
	N1 = 1'b0;
end 

// Ci
always
begin
	Ci = 1'b0;
	Ci = #10000 1'b1;
	#10000;
end 

// BP
always
begin
	BP = 1'b0;
	BP = #20000 1'b1;
	#20000;
end 

// AP
initial
begin
	repeat(12)
	begin
		AP = 1'b0;
		AP = #40000 1'b1;
		# 40000;
	end
	AP = 1'b0;
end 

// Tlas
always
begin
	Tlas = 1'b0;
	Tlas = #10000 1'b1;
	#10000;
end 

// B
always
begin
	B = 1'b0;
	B = #20000 1'b1;
	#20000;
end 

// A
initial
begin
	repeat(12)
	begin
		A = 1'b0;
		A = #40000 1'b1;
		# 40000;
	end
	A = 1'b0;
end 

sdsy_vlg_sample_tst tb_sample (
	.A(A),
	.AP(AP),
	.B(B),
	.BP(BP),
	.Ci(Ci),
	.N1(N1),
	.N2(N2),
	.N3(N3),
	.N4(N4),
	.Tlas(Tlas),
	.sampler_tx(sampler)
);

sdsy_vlg_check_tst tb_out(
	.C0(C0),
	.S(S),
	.SP(SP),
	.T(T),
	.sampler_rx(sampler)
);
endmodule

