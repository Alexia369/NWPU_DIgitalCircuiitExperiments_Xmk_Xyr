// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/20/2023 19:58:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    iddisplay_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module iddisplay_1_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module iddisplay_1_vlg_check_tst (
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H1,
	H2,
	H3,
	H4,
	L1,
	L2,
	L3,
	L4,
	sampler_rx
);
input  A;
input  B;
input  C;
input  D;
input  E;
input  F;
input  G;
input  H1;
input  H2;
input  H3;
input  H4;
input  L1;
input  L2;
input  L3;
input  L4;
input sampler_rx;

reg  A_expected;
reg  B_expected;
reg  C_expected;
reg  D_expected;
reg  E_expected;
reg  F_expected;
reg  G_expected;
reg  H1_expected;
reg  H2_expected;
reg  H3_expected;
reg  H4_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  L4_expected;

reg  A_prev;
reg  B_prev;
reg  C_prev;
reg  D_prev;
reg  E_prev;
reg  F_prev;
reg  G_prev;
reg  H1_prev;
reg  H2_prev;
reg  H3_prev;
reg  H4_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  L4_prev;

reg  A_expected_prev;
reg  B_expected_prev;
reg  C_expected_prev;
reg  D_expected_prev;
reg  E_expected_prev;
reg  F_expected_prev;
reg  G_expected_prev;
reg  H1_expected_prev;
reg  H2_expected_prev;
reg  H3_expected_prev;
reg  H4_expected_prev;
reg  L1_expected_prev;
reg  L2_expected_prev;
reg  L3_expected_prev;
reg  L4_expected_prev;

reg  last_A_exp;
reg  last_B_exp;
reg  last_C_exp;
reg  last_D_exp;
reg  last_E_exp;
reg  last_F_exp;
reg  last_G_exp;
reg  last_H1_exp;
reg  last_H2_exp;
reg  last_H3_exp;
reg  last_H4_exp;
reg  last_L1_exp;
reg  last_L2_exp;
reg  last_L3_exp;
reg  last_L4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	D_prev = D;
	E_prev = E;
	F_prev = F;
	G_prev = G;
	H1_prev = H1;
	H2_prev = H2;
	H3_prev = H3;
	H4_prev = H4;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	D_expected_prev = D_expected;
	E_expected_prev = E_expected;
	F_expected_prev = F_expected;
	G_expected_prev = G_expected;
	H1_expected_prev = H1_expected;
	H2_expected_prev = H2_expected;
	H3_expected_prev = H3_expected;
	H4_expected_prev = H4_expected;
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
end



// expected A
initial
begin
	A_expected = 1'bX;
end 

// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected D
initial
begin
	D_expected = 1'bX;
end 

// expected E
initial
begin
	E_expected = 1'bX;
end 

// expected F
initial
begin
	F_expected = 1'bX;
end 

// expected G
initial
begin
	G_expected = 1'bX;
end 

// expected H1
initial
begin
	H1_expected = 1'bX;
end 

// expected H2
initial
begin
	H2_expected = 1'bX;
end 

// expected H3
initial
begin
	H3_expected = 1'bX;
end 

// expected H4
initial
begin
	H4_expected = 1'bX;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
end 

// expected L2
initial
begin
	L2_expected = 1'bX;
end 

// expected L3
initial
begin
	L3_expected = 1'bX;
end 

// expected L4
initial
begin
	L4_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or D_expected or D or E_expected or E or F_expected or F or G_expected or G or H1_expected or H1 or H2_expected or H2 or H3_expected or H3 or H4_expected or H4 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected D = %b | expected E = %b | expected F = %b | expected G = %b | expected H1 = %b | expected H2 = %b | expected H3 = %b | expected H4 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,D_expected_prev,E_expected_prev,F_expected_prev,G_expected_prev,H1_expected_prev,H2_expected_prev,H3_expected_prev,H4_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real D = %b | real E = %b | real F = %b | real G = %b | real H1 = %b | real H2 = %b | real H3 = %b | real H4 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | ",A_prev,B_prev,C_prev,D_prev,E_prev,F_prev,G_prev,H1_prev,H2_prev,H3_prev,H4_prev,L1_prev,L2_prev,L3_prev,L4_prev);
`endif
	if (
		( A_expected_prev !== 1'bx ) && ( A_prev !== A_expected_prev )
		&& ((A_expected_prev !== last_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp = A_expected_prev;
	end
	if (
		( B_expected_prev !== 1'bx ) && ( B_prev !== B_expected_prev )
		&& ((B_expected_prev !== last_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp = B_expected_prev;
	end
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( D_expected_prev !== 1'bx ) && ( D_prev !== D_expected_prev )
		&& ((D_expected_prev !== last_D_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp = D_expected_prev;
	end
	if (
		( E_expected_prev !== 1'bx ) && ( E_prev !== E_expected_prev )
		&& ((E_expected_prev !== last_E_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_E_exp = E_expected_prev;
	end
	if (
		( F_expected_prev !== 1'bx ) && ( F_prev !== F_expected_prev )
		&& ((F_expected_prev !== last_F_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_F_exp = F_expected_prev;
	end
	if (
		( G_expected_prev !== 1'bx ) && ( G_prev !== G_expected_prev )
		&& ((G_expected_prev !== last_G_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_expected_prev);
		$display ("     Real value = %b", G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_G_exp = G_expected_prev;
	end
	if (
		( H1_expected_prev !== 1'bx ) && ( H1_prev !== H1_expected_prev )
		&& ((H1_expected_prev !== last_H1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H1_exp = H1_expected_prev;
	end
	if (
		( H2_expected_prev !== 1'bx ) && ( H2_prev !== H2_expected_prev )
		&& ((H2_expected_prev !== last_H2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_H2_exp = H2_expected_prev;
	end
	if (
		( H3_expected_prev !== 1'bx ) && ( H3_prev !== H3_expected_prev )
		&& ((H3_expected_prev !== last_H3_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_H3_exp = H3_expected_prev;
	end
	if (
		( H4_expected_prev !== 1'bx ) && ( H4_prev !== H4_expected_prev )
		&& ((H4_expected_prev !== last_H4_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H4_expected_prev);
		$display ("     Real value = %b", H4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_H4_exp = H4_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end
	if (
		( L2_expected_prev !== 1'bx ) && ( L2_prev !== L2_expected_prev )
		&& ((L2_expected_prev !== last_L2_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_L2_exp = L2_expected_prev;
	end
	if (
		( L3_expected_prev !== 1'bx ) && ( L3_prev !== L3_expected_prev )
		&& ((L3_expected_prev !== last_L3_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_L3_exp = L3_expected_prev;
	end
	if (
		( L4_expected_prev !== 1'bx ) && ( L4_prev !== L4_expected_prev )
		&& ((L4_expected_prev !== last_L4_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_L4_exp = L4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module iddisplay_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire E;
wire F;
wire G;
wire H1;
wire H2;
wire H3;
wire H4;
wire L1;
wire L2;
wire L3;
wire L4;

wire sampler;                             

// assign statements (if any)                          
iddisplay_1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.clk(clk),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4)
);

// clk
initial
begin
	clk = 1'b1;
end 

iddisplay_1_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

iddisplay_1_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.sampler_rx(sampler)
);
endmodule

